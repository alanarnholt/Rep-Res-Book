#### Portugal ###
PT = subset(MoltenCosts, country == 'PT')
PTPlot <- ggplot(PT, aes(year, value, group = variable)) +
geom_line(aes(color = variable)) +
geom_vline(xintercept = c(2009, 2011), linetype = 'dashed') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'),
guide = FALSE) +
xlab('') + ylab('% of 2008 GDP\n') + ggtitle('Portugal\n') +
theme_bw()
#### Ireland ####
IE = subset(MoltenCosts, country == 'IE')
IEPlot <- ggplot(IE, aes(year, value, group = variable)) +
geom_line(aes(color = variable)) +
geom_vline(xintercept = c(2011), linetype = 'dashed') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'),
name = 'Liabilities') +
xlab('') + ylab('% of 2008 GDP\n') + ggtitle('Ireland\n') +
theme_bw()
#### Germany ####
DE = subset(MoltenCosts, country == 'DE')
View(DE)
type <- c('Original EDPT', 'Revised EDPT', 'Original + Financial\nCrisis',
'Original EDPT', 'Revised EDPT', 'Original + Financial\nCrisis')
year <- c(2009, 2009, 2009,
2010, 2010, 2010)
value <- c(5942, 11411, 12059,
5943, 42987, 44146)
Comb <- data.frame(type, year, value)
library(repmis)
library(reshape2)
library(ggplot2)
library(DataCombine)
library(gridExtra)
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point() +
geom_line() +
scale_color_brewer(palette = 'Set1', name = '') +
scale_linetype_discrete(name = '') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line() +
scale_color_brewer(palette = 'Set1', name = '') +
scale_linetype_discrete(name = '') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line(size = 3) +
scale_color_brewer(palette = 'Set1', name = '') +
scale_linetype_discrete(name = '') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line(size = 2) +
scale_color_brewer(palette = 'Set1', name = '') +
scale_linetype_discrete(name = '') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1', name = '') +
scale_linetype_discrete(name = '') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
pdf('~/Desktop/EuroReWrite/IrelandNumbersCompare.pdf', width = 5) ## Change later
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1', name = '') +
scale_linetype_discrete(name = '') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
dev.off()
pdf('~/Desktop/EuroReWrite/IrelandNumbersCompare.pdf', width = 7) ## Change later
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1', name = '') +
scale_linetype_discrete(name = '') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
dev.off()
type <- c('Original EDPT', 'Revised EDPT', 'Original + Financial\nCrisis Liabilities',
'Original EDPT', 'Revised EDPT', 'Original + Financial\nCrisis Liabilities')
year <- c(2009, 2009, 2009,
2010, 2010, 2010)
value <- c(5942, 11411, 12059,
5943, 42987, 44146)
Comb <- data.frame(type, year, value)
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1', name = '') +
scale_linetype_discrete(name = '') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
pdf('~/Desktop/EuroReWrite/IrelandNumbersCompare.pdf', width = 7) ## Change later
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1', name = '') +
scale_linetype_discrete(name = '') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
dev.off()
pdf('~/Desktop/EuroReWrite/IrelandNumbersCompare.pdf', width = 10) ## Change later
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1', name = '') +
scale_linetype_discrete(name = '') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
dev.off()
###############
# Compare ex post recorded contingent and realised costs
# Christopher Gandrud
# 30 May 2014
###############
#### Load packages ####
library(repmis)
library(reshape2)
library(ggplot2)
library(DataCombine)
library(gridExtra)
#### Gather and clean data (originally from Eurostat) ####
CostsURL <- 'https://raw.githubusercontent.com/christophergandrud/CrisisDataIssues/master/data/Eurostat_CrisisCosts.csv'
Costs = source_data(CostsURL, cache = TRUE)
CostSub = Costs[, c('country', 'year', 'GovLiabilitiesPerGdp_2008',
'ContingentLiabilitiesPerGdp_2008')]
MoltenCosts = melt(CostSub, id.vars = c('country', 'year'))
MoltenCosts$variable <- factor(MoltenCosts$variable,
labels = c('Immediately\nRealized', 'Contingent'))
#### Portugal ###
PT = subset(MoltenCosts, country == 'PT')
PTPlot <- ggplot(PT, aes(year, value, group = variable)) +
geom_point(size = 3) +
geom_line(aes(color = variable)) +
geom_vline(xintercept = c(2009, 2011), linetype = 'dashed') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'),
guide = FALSE) +
xlab('') + ylab('% of 2008 GDP\n') + ggtitle('Portugal\n') +
theme_bw()
#### Ireland ####
IE = subset(MoltenCosts, country == 'IE')
IEPlot <- ggplot(IE, aes(year, value, group = variable)) +
geom_point(size = 3) +
geom_line(aes(color = variable)) +
geom_vline(xintercept = c(2011), linetype = 'dashed') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'),
name = 'Liabilities') +
xlab('') + ylab('% of 2008 GDP\n') + ggtitle('Ireland\n') +
theme_bw()
#### Germany ####
DE = subset(MoltenCosts, country == 'DE')
DEPlot <- ggplot(DE, aes(year, value, group = variable)) +
geom_point(size = 3) +
geom_line(aes(color = variable)) +
geom_vline(xintercept = c(2009, 2013), linetype = 'dashed') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'),
guide = FALSE) +
xlab('') + ylab('% of 2008 GDP\n') + ggtitle('Germany\n') +
theme_bw()
gP1 <- ggplotGrob(PTPlot)
gP2 <- ggplotGrob(IEPlot)
gP3 <- ggplotGrob(DEPlot)
maxWidth = grid::unit.pmax(gP1$widths[2:5], gP2$widths[2:5],
gP3$widths[2:5])
gP1$widths[2:5] <- as.list(maxWidth)
gP2$widths[2:5] <- as.list(maxWidth)
gP3$widths[2:5] <- as.list(maxWidth)
grid.arrange(arrangeGrob(gP1, gP2, gP3, ncol = 1,
heights = c(3, 3, 3)))
DEPlot <- ggplot(DE, aes(year, value, group = variable, color = variable)) +
geom_point(size = 3) +
geom_line() +
geom_vline(xintercept = c(2009, 2013), linetype = 'dashed') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'),
guide = FALSE) +
xlab('') + ylab('% of 2008 GDP\n') + ggtitle('Germany\n') +
theme_bw()
DEPlot
###############
# Compare ex post recorded contingent and realised costs
# Christopher Gandrud
# 30 May 2014
###############
#### Load packages ####
library(repmis)
library(reshape2)
library(ggplot2)
library(DataCombine)
library(gridExtra)
#### Gather and clean data (originally from Eurostat) ####
CostsURL <- 'https://raw.githubusercontent.com/christophergandrud/CrisisDataIssues/master/data/Eurostat_CrisisCosts.csv'
Costs = source_data(CostsURL, cache = TRUE)
CostSub = Costs[, c('country', 'year', 'GovLiabilitiesPerGdp_2008',
'ContingentLiabilitiesPerGdp_2008')]
MoltenCosts = melt(CostSub, id.vars = c('country', 'year'))
MoltenCosts$variable <- factor(MoltenCosts$variable,
labels = c('Immediately\nRealized', 'Contingent'))
#### Portugal ###
PT = subset(MoltenCosts, country == 'PT')
PTPlot <- ggplot(PT, aes(year, value, group = variable, color = variable)) +
geom_point(size = 3) +
geom_line() +
geom_vline(xintercept = c(2009, 2011), linetype = 'dashed') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'),
guide = FALSE) +
xlab('') + ylab('% of 2008 GDP\n') + ggtitle('Portugal\n') +
theme_bw()
#### Ireland ####
IE = subset(MoltenCosts, country == 'IE')
IEPlot <- ggplot(IE, aes(year, value, group = variable, color = variable)) +
geom_point(size = 3) +
geom_line() +
geom_vline(xintercept = c(2011), linetype = 'dashed') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'),
name = 'Liabilities') +
xlab('') + ylab('% of 2008 GDP\n') + ggtitle('Ireland\n') +
theme_bw()
#### Germany ####
DE = subset(MoltenCosts, country == 'DE')
DEPlot <- ggplot(DE, aes(year, value, group = variable, color = variable)) +
geom_point(size = 3) +
geom_line() +
geom_vline(xintercept = c(2009, 2013), linetype = 'dashed') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'),
guide = FALSE) +
xlab('') + ylab('% of 2008 GDP\n') + ggtitle('Germany\n') +
theme_bw()
# Combine
gP1 <- ggplotGrob(PTPlot)
gP2 <- ggplotGrob(IEPlot)
gP3 <- ggplotGrob(DEPlot)
maxWidth = grid::unit.pmax(gP1$widths[2:5], gP2$widths[2:5],
gP3$widths[2:5])
gP1$widths[2:5] <- as.list(maxWidth)
gP2$widths[2:5] <- as.list(maxWidth)
gP3$widths[2:5] <- as.list(maxWidth)
grid.arrange(arrangeGrob(gP1, gP2, gP3, ncol = 1,
heights = c(3, 3, 3)))
pdf('~/Desktop/EuroReWrite/EU_3CasesCompare.pdf', width = 10) ## Change later
grid.arrange(arrangeGrob(gP1, gP2, gP3, ncol = 1,
heights = c(3, 3, 3)))
dev.off()
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1', name = 'Data source') +
scale_linetype_discrete(name = 'Data source') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
pdf('~/Desktop/EuroReWrite/IrelandNumbersCompare.pdf', width = 10) ## Change later
ggplot(Comb, aes(as.factor(year), value, group = type, linetype = type,
color = type)) +
geom_point(size = 3) +
geom_line(size = 1) +
scale_color_brewer(palette = 'Set1', name = 'Data source') +
scale_linetype_discrete(name = 'Data source') +
xlab('') + ylab('Millions of Euros\n') +
theme_bw(base_size = 15)
dev.off()
owners <- c('Hamburg', 'HSH FinanxFonds AoR', 'Schleswig-Holstein',
'Savings Banks Association for Schleswig-Holstein',
'Private Investors')
share <- c(11, 65, 10, 5, 9)
HSHComb <- data.frame(owners, share)
ggplot(HSHComb, aes(owners, share)) +
geom_bar() +
theme_bw()
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
theme_bw()
owners <- c('Hamburg', 'HSH FinanxFonds\nAoR', 'Schleswig-Holstein',
'Savings Banks Association for Schleswig-Holstein',
'Private Investors')
share <- c(11, 65, 10, 5, 9)
HSHComb <- data.frame(owners, share)
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
theme_bw()
owners <- c('Hamburg', 'HSH FinanxFonds\nAoR', 'Schleswig-Holstein',
'Savings Banks\nAssociation for\nSchleswig-Holstein',
'Private Investors')
share <- c(11, 65, 10, 5, 9)
HSHComb <- data.frame(owners, share)
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
theme_bw()
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
theme_bw()
HSHComb <- HSHComb[order(HSHComb$share), ]
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
theme_bw()
owners <- c('Hamburg', 'HSH FinanxFonds\nAoR', 'Schleswig-Holstein',
'Savings Banks\nAssociation for\nSchleswig-Holstein',
'Private Investors')
share <- c(11, 65, 10, 5, 9)
HSHComb <- data.frame(owners, share)
HSHComb <- HSHComb[order(HSHComb$share), ]
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
theme_bw()
View(HSHComb)
HSHComb <- transform(HSHComb, owner = reorder(owner,
order(share, decreasing = TRUE)))
HSHComb <- transform(HSHComb, owners = reorder(owners,
order(share, decreasing = TRUE)))
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
theme_bw()
owners <- c('Hamburg', 'HSH Finanzfonds\nAoR', 'Schleswig-Holstein',
'Savings Banks\nAssociation for\nSchleswig-Holstein',
'Private Investors')
share <- c(11, 65, 10, 5, 9)
HSHComb <- data.frame(owners, share)
HSHComb <- transform(HSHComb, owners = reorder(owners,
order(share, decreasing = TRUE)))
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
theme_bw()
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
theme_bw(base_size = 15)
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
ggtitle('Shareholder Structure of HSH NordBank\n')
theme_bw(base_size = 15)
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
ggtitle('Shareholder Structure of HSH NordBank\n') +
theme_bw(base_size = 15)
owners <- c('Hamburg', 'HSH Finanzfonds\nAoR', 'Schleswig-Holstein',
'Savings Banks\nAssociation for\nSchleswig-Holstein',
'Private\nInvestors')
share <- c(11, 65, 10, 5, 9)
HSHComb <- data.frame(owners, share)
HSHComb <- transform(HSHComb, owners = reorder(owners,
order(share, decreasing = TRUE)))
ggplot(HSHComb, aes(owners, share)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
ggtitle('Shareholder Structure of HSH NordBank\n') +
theme_bw(base_size = 15)
owners <- c('Hamburg', 'HSH Finanzfonds\nAoR', 'Schleswig-Holstein',
'Savings Banks\nAssociation for\nSchleswig-Holstein',
'Private\nInvestors')
type <- c('Public', 'Public', 'Public', 'Public', 'Private')
share <- c(11, 65, 10, 5, 9)
HSHComb <- data.frame(owners, type, share)
HSHComb <- transform(HSHComb, owners = reorder(owners,
order(share, decreasing = TRUE)))
ggplot(HSHComb, aes(owners, share, color = type)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
ggtitle('Shareholder Structure of HSH NordBank\n') +
theme_bw(base_size = 15)
ggplot(HSHComb, aes(owners, share, color = type, fill = type)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
ggtitle('Shareholder Structure of HSH NordBank\n') +
theme_bw(base_size = 15)
ggplot(HSHComb, aes(owners, share, color = type, fill = type)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'), name = '') +
ggtitle('Shareholder Structure of HSH NordBank\n') +
theme_bw(base_size = 15)
ggplot(HSHComb, aes(owners, share, color = type, fill = type)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'), name = '') +
scale_fill_manual(values = c('#2c7fb8', '#fdae6b'), name = '') +
ggtitle('Shareholder Structure of HSH NordBank\n') +
theme_bw(base_size = 15)
#############
# R script to create plot of Shareholder Structure of HSH Nordbank
# Christopher Gandrud
# 30 May 2014
#############
library(ggplot2)
# Create data
owners <- c('Hamburg', 'HSH Finanzfonds\nAoR', 'Schleswig-Holstein',
'Savings Banks\nAssociation for\nSchleswig-Holstein',
'Private\nInvestors')
type <- c('Public', 'Public', 'Public', 'Public', 'Private')
share <- c(11, 65, 10, 5, 9)
HSHComb <- data.frame(owners, type, share)
# Order largest to smallest
HSHComb <- transform(HSHComb, owners = reorder(owners,
order(share, decreasing = TRUE)))
# Plot
ggplot(HSHComb, aes(owners, share, color = type, fill = type)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'), name = '') +
scale_fill_manual(values = c('#2c7fb8', '#fdae6b'), name = '') +
ggtitle('Shareholder Structure of HSH NordBank\n') +
theme_bw(base_size = 15)
library(highr)
hi_andre('Test', language = 'R')
Sys.setenv()
Sys.getenv()
?Sys.setenv
Sys.setenv(PATH=paste("/usr/local/bin", Sys.getenv("PATH"), sep=":")
)
Sys.getenv()
hi_andre('Test', language = 'R')
hi_andre('Test', language = 'R')
library(highr)
hi_andre('Test', language = 'R')
Sys.getenv('PATH')
?gfortran
??gfortran
Sys.getenv('PATH')
library(highr)
hi_andre('Test', language = 'R')
Sys.which('highlight')
Sys.info
Sys.info()
Sys.info('sysname')
Sys.info(1)
Sys.info
?Sys.info
Sys.info(sysname)
Sys.info()[1]
Test = Sys.info()[[1]]
Test
install.packages("MASS", lib="/usr/local/Cellar/r/3.1.0/R.framework/Versions/3.1/Resources/library")
#############
# R script to create plot of Shareholder Structure of HSH Nordbank
# Christopher Gandrud
# 1 June 2014
#############
# Load required package
library(ggplot2)
# Create data
owners <- c('Hamburg', 'HSH Finanzfonds\nAoR', 'Schleswig-Holstein',
'Savings Banks\nAssociation for\nSchleswig-Holstein',
'Private\nInvestors')
type <- c('Public', 'Public', 'Public', 'Public', 'Private')
share <- c(11, 65, 10, 5, 9)
HSHComb <- data.frame(owners, type, share)
# Order largest to smallest
HSHComb <- transform(HSHComb, owners = reorder(owners,
order(share, decreasing = TRUE)))
# Plot
ggplot(HSHComb, aes(owners, share, color = type, fill = type)) +
geom_bar(stat = 'identity') +
xlab('') + ylab('% ownership stake\n') +
scale_color_manual(values = c('#2c7fb8', '#fdae6b'), name = '') +
scale_fill_manual(values = c('#2c7fb8', '#fdae6b'), name = '') +
ggtitle('Figure 1: Shareholder Structure of HSH NordBank\n') +
theme_bw(base_size = 15)
library(d3Network)
library(RCurl)
# Gather raw JSON formatted data
URL <- "https://raw.githubusercontent.com/christophergandrud/d3Network/master/JSONdata/miserables.json"
MisJson <- getURL(URL, ssl.verifypeer = FALSE)
# Convert JSON arrays into data frames
MisLinks <- JSONtoDF(jsonStr = MisJson, array = "links")
MisNodes <- JSONtoDF(jsonStr = MisJson, array = "nodes")
d3ForceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400,
opacity = 0.9, file = '~/Desktop/ForceTest.html')
d3ForceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", width = 550, height = 400,
opacity = 0.9, file = '~/Desktop/ForceTest2.html')
library(knitr)
# Specify working directories.
## Rep-Res-Parent.Rnw
ParentDirectory <- "/git_repositories/Rep-Res-Book/Source/"
## README.Rmd
SetupDirectory <- "/git_repositories/Rep-Res-Book/Writing_Setup/"
##### Create PDF Book Manuscript ####
# Compile the book's parent document
setwd(ParentDirectory)
knitr::knit2pdf(input = "Rep-Res-Parent.Rnw")
setwd(SetupDirectory)
# Knit README file
OutReadme <- "/git_repositories/Rep-Res-Book/README.md" # Change as needed
knitr::knit(input = "README.Rmd", output = OutReadme)
