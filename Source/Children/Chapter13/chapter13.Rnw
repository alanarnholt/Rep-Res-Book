% Chapter Chapter 13 For Reproducible Research in R and RStudio
% Christopher Gandrud
% Created: 16/07/2012 05:45:03 pm CEST
% Updated: 9 June 2014

<<set-parent13, echo=FALSE, results='hide', cache=FALSE>>=
set_parent('Rep-Res-Parent.Rnw')
@

\chapter{Presenting on the Web with Markdown}\label{MarkdownChapter}

LaTeX is the standard markup language for creating academic quality articles and books. If we want to present research findings via the internet our best option is HTML.\index{HTML} HTML syntax can be tedious to write, as we saw in Chapter \ref{TablesChapter}. Luckily the Markdown language was created as a simplified way of writing HTML documents. As we have seen, Markdown can be fully integrated with \emph{knitr} for creating reproducible research HTML presentation documents.

In this chapter we will learn about Markdown editors and the basic Markdown syntax for creating simple reproducible HTML documents, including many of the things we covered for LaTeX documents such as headings and text formatting. Please refer back to previous chapters for syntax used to display code and code chunks (Chapter \ref{StatsModel}), tables (Chapter \ref{TablesChapter}) and figures (Chapter \ref{FiguresChapter}) with R Markdown documents. In this chapter will also briefly look at some more advanced features for including math with MathJax, footnotes and bibliographies with Pandoc and customizing styles with CSS. Then we will learn how to create HTML slideshows with Markdown and RStudio as well as the \emph{slidify} R package \citep{R-slidify}. We'll finish up the chapter by looking at options for publishing Markdown created documents, including locally on your computer, Dropbox, and GitHub Pages. 

\section{The Basics}

Markdown was created specifically to make it easy to write HTML (or XHTML\index{XHTML}\footnote{Extensible HyperText Markup Language}) using a syntax that is human readable and possibly publishable without compiling. For example, compare the Markdown table syntax in Chapter \ref{TablesChapter} to the HTML syntax for virtually the same table.\footnote{For more information see John Gruber's website: \url{http://daringfireball.net/projects/markdown/}.} That being said, to make Markdown simple it does not have as many capabilities as HTML. To get around this problem you can still use HTML in Markdown, though note that Markdown syntax cannot be used between HTML element tags. 

\subsection{Getting started with Markdown editors}\index{Markdown!editors}

Like for R LaTeX, RStudio\index{RStudio} functions as a very good editor for R Markdown documents and regular non-knittable documents as well. To create a new R Markdown document in RStudio click \texttt{File} in the menu bar then \texttt{New} \textrightarrow{} \texttt{R Markdown}. RStudio has full syntax highlighting for code chunks and can \textbf{knit} \texttt{.Rmd} files into \texttt{.md} then render them in \emph{.html} with one click of the \texttt{Knit HTML} button (\includegraphics[scale=0.5]{Children/Chapter13/images13/KnitHTML.png}). As we saw in Chapter \ref{GettingStartedRKnitr} (Figure \ref{NotebookExample}), when you knit a Markdown document in RStudio, it will preview the HTML document for you. You can always view HTML documents by opening them with your web browser. You can do this directly from RStudio's \textbf{Preview HTML}\index{RStudio!Preview HTML} window by clicking the \texttt{View the page with the system browser} button (\includegraphics[scale=0.45]{Children/Chapter10/images10/ShowInBrowser.png}). You can also click the question mark button (\includegraphics[scale=0.5]{Children/Chapter13/images13/MDButton.png}) for a quick guide to the Markdown syntax used in RStudio.\footnote{RStudio uses Sundown,\index{Markdown!Sundown} which is a variant of Markdown developed by GitHub.\index{GitHub} See: \url{https://github.com/vmg/sundown}.}

Being plain-text, you can also use any other text editor to modify Markdown documents, though they lack the level of integration with \emph{knitr} that RStudio has. There are also Markdown specific programs that include useful features like live previews\index{Markdown!live preview} (i.e. continuously updating) of how the Markdown document will look when compiled. Again these will not run \emph{knitr} code. However, they do include some features RStudio lacks beyond live updating, like word counts,\index{word count} the ability to save in PDF formats, and multiple CSS style files to format your documents with. On my Mac computer I often use Mou\footnote{\url{http://mouapp.com/}}\index{Mou} and Marked\footnote{See: \url{http://markedapp.com/}.\index{Marked} Marked can be integrated fairly well with RStudio as it only previews Markdown documents, rather than allowing you to edit them. It has more functionality than RStudio's \textbf{Preview HTML} window.}. One Markdown editor option on Windows is MarkdownPad.\footnote{\url{http://markdownpad.com/}}\index{MarkdownPad} 

\subsection{Preamble and document structure}

That was kind of a trick subsection title. Unlike LaTeX documents, Markdown documents do not have a preamble. There is also no need to start a body environment or anything like that. HTML head elements\index{HTML element!head} (HTMLs preamble equivalent) are added automatically when you render Markdown documents into HTML. So with Markdown, you can just start typing.

Here is an example of an R Markdown document that creates the map we saw in Chapter \ref{FiguresChapter}:\footnote{This code is available on GitHub at: \url{https://github.com/christophergandrud/Rep-Res-Examples/blob/master/RMarkdownExamples/ExampleKnitrMarkdown.Rmd}.} We'll go through all of the code below.

<<Ch13FullExample, eval=FALSE>>=
# Example R Markdown File
## from ''Reproducible Research with R and RStudio''
### Christopher Gandrud
### 14 January 2013

-----------

```{r LoadPackages, include=FALSE}
# Load required packages
library(devtools)
```

We can use use R's [googleVis](http://code.google.com/p/google-
motion-charts-with-r/#Examples) package to create interactive 
JavaScript tables, charts, and maps. Here is an example of 
how to create a map with *googleVis*'s `gvisGeoMap` command. 

Let's first download some data from [GitHub](https://github.com/). 
See chapters 6 and 7 for details about this data as well as the 
[variable description page](https://github.com/christophergandrud/
Rep-Res-Examples/blob/master/DataGather_Merge/MainData_
VariableDescriptions.md).

-----------

## Fertilizer Consumption (kilograms per hectare of arable land) 
in 2003
### Data from the [World Bank](http://data.worldbank.org/
indicator/AG.CON.FERT.ZS)

```{r CreategvisGeoMap, echo=FALSE, message=FALSE, results='asis'}
# Create geo map of global fertilizer consumption for 2003
# The data is loaded from GitHub (http://bit.ly/V0ldsf)
## The data gathering process used to create this data set
## is completely reproducible. For more information see:
## http://bit.ly/YnMKBG
source_url("http://bit.ly/VNnZxS")
```

-----------
@

\noindent When knitted in RStudio and viewed in the Google Chrome web browser\index{Google Chrome} the final presentation document looks like Figure \ref{MarkdownExampleFig}.

\begin{figure}
    \caption{Example Rendered R Markdown Document}
    \label{MarkdownExampleFig}
    \begin{center}
        \includegraphics[width=0.8\textwidth]{Children/Chapter13/images13/MarkdownExampleMap.png}
    \end{center}
\end{figure}


\subsection{Headers}\index{Markdown!headers}

Headers\label{MarkdownHeader} in Markdown are extremely simple. To create a line in the topmost header style--maybe a title--just place one hash mark (\verb|#|) at the beginning of the line. The second tier header gets two hashes (\verb|##|) and so on. You can also put the hash mark(s) at the end of the header, but this is not necessary. Here is an example of the three header:

<<Ch13header, eval=FALSE, tidy=FALSE, engine='sh'>>=
# A level one header
## A level two header
### A level three header
@

\noindent There are six header levels in Markdown. You can also create level one headers by following a line of text with equal signs. Level two headers can be created by following a line of text with dashes:

<<Ch13headerLines, eval=FALSE, tidy=FALSE, engine='sh'>>=
A level one header
===================

A level two header
-------------------
@

\subsection{Horizontal lines}\index{Markdown!lines}

If you would like to create horizontal lines that run the width of the page in Markdown simply place three or more equal signs or dashes separated by text from above by one blank line:

<<Ch13Lines, eval=FALSE, tidy=FALSE, engine='sh'>>=
Create a horizontal line.

=========
@

\subsection{Paragraphs and new lines}\index{Markdown!paragraphs}

Just like in LaTeX new paragraphs are created by putting text on a new line separated by previous text with a blank line. For example:

<<Ch13NewLine, eval=FALSE, tidy=FALSE, engine='sh'>>=
This is the first paragraph.

This is the second paragraph.
@

\noindent You might have noticed that in the headers example we did not need to separate the header with a blank line.

Separating lines with a blank line places\index{Markdown!new lines} a blank line in the final document. End a line with two or more white spaces (  ) to create a new line that is not separated by a blank line.\index{Markdown!new line}

\subsection{Italics and bold}\index{Markdown!italics}\index{Markdown!bold}

To \emph{italicize} a word in Markdown simply place it between two asterisks, e.g. \verb|*Italicize these words*|. To make words \textbf{bold} place them between four asterisks, two on either side: \verb|**Make these words bold**|.

\subsection{Links}\label{MarkdownLinks}\index{Markdown!hyper-links}

To create hyper-links in Markdown use the \verb|[LINK_TEXT](URL)| syntax.\footnote{You can also include a \texttt{title} attribute after the URL. Though this is generally not very useful. See Section \ref{TitleAttribute} for a discussion.} \verb|LINK_TEXT| is the text that you would like to show up as the hyper-link text. When you click on this text it will take you to the linked site specified by \texttt{URL}. If you want to show only a URL as the text type it in both the square brackets and parentheses. This is a little tedious so in RStudio you can just type the URL and it will be hyper-linked. In regular Markdown place the URL between less than and greater than signs (\verb|<URL>|).

\subsection{Special characters and font customization}\index{Markdown!special characters}

Unlike LaTeX, Markdown can include almost any letters and characters included in your system. The main exceptions are characters used by Markdown syntax (e.g. \verb|*|, \verb|#|, \verb|\| and so on). You will have to escape these (see below). Font sizes and typefaces cannot be set directly with Markdown syntax. You need to set these with HTML or CSS, which I don't cover here, though below we will look at how to use a custom CSS file.

\subsection{Lists}\index{Markdown!lists}

To create itemized lists in Markdown simply place the items after one dash:

<<Ch13ItemizeList, eval=FALSE, tidy=FALSE, engine='sh'>>=
- Item 1
- Another item
- Item 3
@

\noindent To create a numbered list use numbers and periods rather than dashes.

<<Ch13NumberedList, eval=FALSE, tidy=FALSE, engine='sh'>>=
1. Item 1
2. Another item
3. Item 3
@

\subsection{Escape characters}\index{Markdown!escape character}

Markdown, like LaTeX and R, uses a backslash (\verb|\|) as an escape character. For example if you want to have an asterisk in the text of your document (rather than start to italicize your text, e.g. \verb|*some italicized text*|), type: \verb|\*|. Two characters--ampersand (\verb|&|)\index{Markdown!ampersand} and the less than sign (\verb|<|)--\index{Markdown!less than sign}have special meanings in HTML.\footnote{Ampersands declare the beginning of a special HTML character. Less than signs begin HTML tags.} So, to have them printed literally in your text you have to use the HTML code for the characters. Ampersands are created with \verb|&amp|. Less than signs are created with \verb|&lt|. 

\subsection{Math with MathJax}

Markdown by itself can't format mathematical equations. We can create LaTeX style equations by adding on the MathJax JavaScript\index{JavaScript} engine.\index{MathJax} MathJax syntax is the same as LaTeX syntax (see Section \ref{MathLaTeX}), especially when used from RStudio. Markdown documents rendered in RStudio automatically link to the MathJax engine online.\footnote{You will not be able to render equations when you are not online.} If you want to use another program to render Markdown documents with MathJax equations you may need to take extra steps to link to MathJax. For more details see: \url{http://docs.mathjax.org/en/latest/start.html#mathjax-cdn}.

Because backslashes are Markdown escape characters, in many Markdown editors you will have to use two backslashes to create math environments with MathJax. For example, in LaTeX and RStudio's\index{RStudio!Markdown math} Markdown you can create a display equation like this:

\[
s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1}
\]

\noindent by typing:\footnote{In RStudio you can also use dollar signs to delimit MathJax equations as in LaTeX. See the footnotes in Section \ref{MathLaTeX} for more information.}

<<Ch13Equation1, eval=FALSE, tidy=FALSE, engine='sh'>>=
\[
s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1}
\]
@

\noindent But, in other Markdown programs you may have to use:

<<Ch13Equation2, eval=FALSE, tidy=FALSE, engine='sh'>>=
\\[
s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1}
\\]
@

To make inline equations simply use parentheses instead of square brackets as in LaTeX, e.g. \verb|\( s^{2} = \frac{\sum(x - \bar{x})^2}{n - 1} \)|.

\section{Markdown with Pandoc and Custom CSS}

Markdown is simple and easy to use. But being simple means that it lacks important functionality for presenting research results, such as footnotes and bibliographies. Also, customizing the look of a Markdown document is difficult. In this section we will learn how to overcome these limitations with Pandoc and CSS. Space constraints limit me from giving a full introduction to either of these tools, so we are mostly going to focus on how to set up R so that we can use Pandoc and custom CSS style files to render Markdown documents into HTML. We will look at two ways to run Pandoc from R. The first is via the \texttt{system} command. The second is via \emph{knitr}'s \texttt{pandoc} wrapper command.\index{wrapper} 

\subsection{Pandoc}\index{Pandoc}

With a little customization\label{PandocDiscussion} you can include footnotes and BibTeX bibliographies\index{BibTeX} in R Markdown documents. When you click on the \texttt{Knit HTML}\index{RStudio!Knit HTML button} button in RStudio\index{RStudio} it runs two commands: \texttt{knit} to convert your \texttt{.Rmd} file to \texttt{.md} and then \texttt{markdownToHTML}\index{R command!markdownToHTML} from the \emph{markdown} package \citep{R-markdown} to convert the Markdown file to HTML.\index{HTML} What we need to do is create a new function to run Pandoc instead of \texttt{markdownToHTML} or reset \texttt{markdownToHTML}.

The simplest way to do this is to create a new R function\index{R command!function} that runs Markdown files created by \emph{knitr} through Pandoc to create an HTML file:\footnote{The function here is modified from one on the RStudio website. See below for more details.}

<<Ch13PandocFunction, eval=FALSE, tidy=FALSE>>=
# Function to render .md file with Pandoc
pandocToHTML <-  function(inputFile, outputFile) 
{      
    system(paste("pandoc", shQuote(inputFile), "-o", 
                 shQuote(outputFile)))
}
@

\noindent The \texttt{system}\index{R command!system} sends the following code to your computer's command line shell where it runs Pandoc. \texttt{shQuote} allows us to use quotes as strings that can be parsed by the shell.\index{shell}\index{command line} In this function the strings are the input and output file names. You can of course customize this code to change how Pandoc renders your documents. For example, we saw in the previous chapter how to use Pandoc to output a Markdown file to markup languages other than HTML. See Section \ref{PandoctoLaTeXExample} for an example and the Pandoc website for more details: \url{http://johnmacfarlane.net/pandoc/}. 

Imagine that we have a file called \emph{Example.Rmd} in our working directory. This is how we \texttt{knit} it and render it with Pandoc:

<<Ch13knitrPandoc, eval=FALSE>>=
# knit file to Example.md
knitr::knit("Example.Rmd", "Example.md")

# Render with Pandoc as Example.html
pandocToHTML("Example.md", "Example.html")
@

\noindent In RStudio\index{RStudio} you can use this type of function rather than \texttt{markdownToHTML} when you click \emph{Knit HTML}. To do this you need to set a new \texttt{option} in an invisible file called \emph{.Rprofile}.\footnote{You can either create a new \emph{.Rprofie} document in your working directory or change the master file always used by R. The location of this file varies by operating system.}\index{R!.Rprofile} Changing this file allows you to alter how R works. Note: using Pandoc rather than \emph{markdownToHTML} from the \emph{markdown} package allows us to use footnotes and bibliographies. However, we also lose functions, like automatic MathJax support. It would take some work (not covered here) to get the best of both worlds. You will have to decide whether Pandoc or the default RStudio renderer is the best way to render your document based on what you want to do. 

Here is the code to add to the \emph{.Rprofile} so that you can use Pandoc when you click \texttt{Knit HTML}.\footnote{This code is from the RStudio website: \url{http://www.rstudio.com/ide/docs/authoring/markdown_custom_rendering}.}

<<Ch13Options, eval=FALSE, tidy=FALSE>>=
options(rstudio.markdownToHTML = 
  function(inputFile, outputFile) {      
    system(paste("pandoc", shQuote(inputFile), "-o", 
                 shQuote(outputFile)))
  }
)  
@

\paragraph{Footnotes with Pandoc}\index{Pandoc!footnotes}\index{Markdown!footnotes}

Ok, once we have R and RStudio set up so that they can use Pandoc we can create documents that take advantage of Pandoc's Markdown extensions.\index{Pandoc!Markdown Extensions} Pandoc Markdown extensions add functions to regular Markdown syntax. I am only going to discuss two of the most important extensions for reproducible Markdown research documents: footnotes and BibTeX bibliographies. For the full range of Pandoc's abilities see: \url{http://johnmacfarlane.net/pandoc/README.html}.

To create what Pandoc calls an ``inline note'' type footnote use the \verb|^[NOTE]| syntax.\index{Pandoc!inline note} For example:

<<Ch13PandocInlineNotes, eval=FALSE, tidy=FALSE, engine='sh'>>=
This is some text.^[This is an inline footnote.]
@

\noindent When rendered, a hyper-link number will appear after ``text.''. It will link to the note (``This is an inline footnote.'') at the bottom of the page.

\paragraph{Bibliographies with Pandoc}\index{Pandoc!bibliographies}\index{Markdown!bibliographies}

We can add BibTeX citations after a small addition to the Pandoc call we use to render the Markdown file. Imagine we have a bibliography file called \emph{Example.bib} in the same directory as our \emph{Example.Rmd} file. We need to add the \verb|--bibliography| option\index{Pandoc option!bibliography} to Pandoc like this:

<<Ch13PandocFunctionBib, eval=FALSE, tidy=FALSE>>=
# Function to render .md file with Pandoc
pandocToHTML <-  
    function(inputFile, outputFile) {      
    system(paste("pandoc", shQuote(inputFile), "-o", 
                 shQuote(outputFile),
                 "--bibliography Example.bib"))
    }
@

Now in the text of our document we can add the citation:

<<Ch13BibTeXCite, eval=FALSE, tidy=FALSE, engine='sh'>>=
This is a citation [@Donoho2009].
@

\noindent Pandoc uses \emph{natbib}\index{LaTeX package!natbib}\index{bibliography}\index{in-text citation} by default so the citation \verb|[@Donoho2009]| will appear as (Donoho et al, 2009). To add text before and after the citation inside of the parentheses use something like this: \verb|[see @Donoho2009, 10]|. This will create an in-text citation that looks like this: (see Donoho et al. 2009, 10), To include only the year and not the authors' surnames, add a minus sign, e.g. \verb|[-@Donoho2009]|. See the Pandoc README website for more options.

Here is a complete example of an R Markdown document that includes footnotes and bibliographies.

<<Ch13PandocDoc, eval=FALSE, tidy=FALSE>>=
# Example Pandoc + knitr Markdown Document
## Christopher Gandrud
### 14 January 2013

-----

This is some text.^[This is an inline footnote.]

This is a *knitr* code chunk:

```{r}
plot(cars$speed, cars$dist)
```

This is a citation [see @Donoho2009, 10].
@

\noindent Note you can find this file, the bibliography, plus commands to render the document at: \url{http://bit.ly/X7BXu9}.\footnote{The full URL is: \url{https://github.com/christophergandrud/Rep-Res-Examples/tree/master/RMarkdownExamples/ExamplePandocKnitrMarkdown}.}

\subsection{CSS style files and Markdown}\index{CSS}

You can customize the appearance of your Markdown files with custom CSS style sheets. CSS files allow you to specify the way a rendered Markdown file looks in a web browser including fonts, margins, background color, and so on. We don't have space to cover CSS syntax here. There are numerous online resources for learning CSS. One of the best ways may be to just copy RStudio's default CSS style sheet into a new file and play around with it to see how things change. One really good tool for this is Google Chrome's Developer Tools.\index{Google Chrome!Developer Tools} The Developer Tools allows you to edit your webpages, including their CSS and see a live preview. It is a really nice way to experiment with CSS (and HTML and JavaScript).\index{HTML}\index{JavaScript}\footnote{For more information on how to access and use Developer Tools in Chrome see: \url{https://developers.google.com/chrome-developer-tools/}.} There are also numerous pre-made style sheets available online.\footnote{One small note: when you create a new style sheet or copy an old one make sure the final line is blank. Otherwise R will give you an ``incomplete final line'' error when you run \texttt{markdownToHTML}} In this example I will use a stylesheet called \emph{Markdown.css} created by Simon Laroche and available at: \url{https://github.com/simonlc/Markdown-CSS}. 

\paragraph{Rendering Markdown files using custom CSS}\index{Markdown!custom CSS}

It is simple to use a custom CSS file with the \texttt{markdownToHTML}\index{R command!markdownToHTML} command. Just save your custom \emph{.css} file in the working directory and use the \texttt{stylesheet} argument with \texttt{markdownToHTML}. Imagine we want to \texttt{knit} our \emph{Example.Rmd} file using a custom style sheet called \emph{Markdown.css}. Both files are in the working directory.

 <<Ch13CustomCSS1, eval=FALSE, tidy=FALSE>>=
# knit file to Example.md
knitr::knit("Example.Rmd", "Example.md")

# Render with using custom Markdown.css style sheet
markdownToHTML("Example.md", "Example.html", 
               stylesheet = "Markdown.css")
@

\noindent When we use this style sheet with the R Markdown file in Figure \ref{MarkdownExampleFig} we get a document that looks like Figure \ref{CustomCSSExample}.

You can of course also modify your \emph{.Rprofile}\index{R!.Rprofile} so that you always use the same CSS style file. RStudio\index{RStudio} suggests adding the following code to your \emph{.Rprofile}:

<<Ch13CustomCSS2, eval=FALSE, tidy=FALSE>>=
options(rstudio.markdownToHTML = 
  function(inputFile, outputFile) {      
    require(markdown)
    markdownToHTML(inputFile, outputFile, 
                   stylesheet = "Markdown.css")   
  }
) 
@

\noindent Simply change the style sheet's name and file path as needed.

\paragraph{Custom CSS files with Pandoc}\index{Pandoc!CSS}

You can add custom CSS files to Pandoc rendered Markdown files as well. To do this add the \verb|--css| option to your \texttt{pandocToHTML} call.\index{Pandoc option!css} This will tell Pandoc what CSS file you want to use. For example:

<<Ch13PandocCustomCSS, eval=FALSE, tidy=FALSE>>=
pandocToHTML <-  
  function(inputFile, outputFile) {      
    system(paste("pandoc", shQuote(inputFile), "-o", 
    shQuote(outputFile), "--bibliography PandocBib.bib", 
    "--css Markdown.css"))
  }
@

\begin{figure}
    \caption{Example Rendered R Markdown Document with Custom CSS}
    \label{CustomCSSExample}
        \begin{center}
            \includegraphics[width=0.8\textwidth]{Children/Chapter13/images13/CustomCSSExample.png}
        \end{center}
\end{figure}

\subsection{\emph{knitr}'s \texttt{pandoc} command}\label{KnitrPandoc}

An alternative way to convert Markdown documents to other formats is \emph{knitr}'s \texttt{pandoc} command.\index{knitr!pandoc}\index{R command!pandoc} The syntax is pretty straightforward. Imagine we want to convert a very simple Markdown document called \emph{SimpleExample.Rmd} to HTML. Imagine also that the document has no bibliography or other custom options, so we can simply use:

<<Ch13KnitPandoc1, eval=FALSE, tidy=FALSE>>=
knitr::pandoc("SimpleExample.Rmd", format = "html")
@ 

We can add Pandoc options, like bibliographies and CSS files, by embedding them at the beginning of the document. For example:

<<Ch13PandocKnitr, eval=FALSE, tidy=FALSE>>=
<!--Pandoc
format: html
css: Markdown.css
bibliography: PandocBib.bib
-->

# Example Pandoc + knitr Markdown Document
## Christopher Gandrud
### 1 May 2013

-----

This is some text.^[This is an inline footnote.]

This is a *knitr* code chunk:

```{r}
plot(cars$speed, cars$dist)
```

This is a citation [see @Donoho2009, 10].
@

\noindent The document is the same as our example from earlier, except at the very beginning we added an HTML comment: \verb|<!--Pandoc . . . -->|. Inside of this comment we added our CSS and bibliography options using Debian Control File syntax.\index{Debian Control File} Basically this just means that we write the Pandoc option name (e.g. \texttt{css}), a colon, then the value (e.g. \texttt{Markdown.css}). Note that each option is on its own line.\footnote{See Yihui Xie's help page for more information: \url{http://yihui.name/knitr/demo/pandoc/}.} Now whenever we use the \texttt{pandoc} command these options will be applied.\footnote{You can also place the options in a separate text file and tell \texttt{pandoc} where it is with the \texttt{config} option.}

%%%%%%%%%%%%% Presentations %%%%%%%%%%%%%%%%%%
\section{Slideshows with Markdown, \emph{knitr}, and HTML}

Because Markdown and \emph{knitr} Markdown documents can be compiled into HTML files it is possible to use them to create HTML5\index{HTML5} slideshows.\footnote{The slideshows created by the tools in this section use features introduced in the 5th version of HTML, i.e. HTML5. In this section I often refer to HTML5 as just HTML for simplicity.} There are a number of advantages to creating HTML presentations with Markdown:

\begin{itemize}
    \item You can use the relatively simple Markdown syntax.
    \item HTML presentations are a nice native way to show content on the web.
    \item HTML presentations can incorporate virtually any content that can be included in a webpage. This includes interactive content, like motion charts created by \emph{googleVis}\index{googleVis} (see Chapter \ref{FiguresChapter}).
\end{itemize} 


\noindent Let's look at how to create HTML slideshows from Markdown documents using (a) RStudio's built in slideshow files, called R Presentations, and the \emph{slidify} R package. R Presentations are generally easier to make than \emph{slidify} slideshows, but they are less customizable.


%%%%%%%%%%%%%% R Presentations %%%%%%%%
\subsection{Slideshows with Markdown, \emph{knitr}, and RStudio's R Presentations}

The easiest, but less customizable way to create HTML slideshows is with RStudio's new R Presentation\index{R Presentation}\index{RStudio!R Presentation} documents.\footnote{This feature is only available from RStudio version 0.98.} To get started open RStudio and click \texttt{File} \textrightarrow \: \texttt{New} \textrightarrow \: \texttt{R Presentation}. RStudio will then ask you to give the presentation a name and save it in a particular file. The reason RStudio does this is because an R Presentation is not just one file. Instead it includes:

\begin{itemize}
	\item A \emph{.Rpres}\index{Rpres} file, which is very similar to a \emph{knitr} Markdown \emph{.Rmd} file.
	\item A \emph{.md} Markdown file created from the \emph{.Rpres} file.
	\item \emph{knitr} cache and figure folders, also created from the \emph{.Rpres} file.
\end{itemize}

\paragraph{Editing and compiling the presentation}

You change the presentation's content by editing the \emph{.Rpres} file using the normal \emph{knitr} Markdown syntax we've covered. The only difference is how you create new slides. Luckily the syntax for this is very simple. Just type the slides title then at least three equal signs (\verb|===|). For example, 

<<Ch13RPresTitle, eval=FALSE, tidy=FALSE, engine='sh'>>=
This is an Example .Rpres Slide Title
===
@ 

\noindent The very first slide is automatically the title slide and will be formatted differently from the rest.\footnote{As of this writing it is a blue slide with white letters.} Here is an example of a complete \emph{.Rpres} file:

<<Ch13RPresFullExample, eval=FALSE, tidy=FALSE>>=
Example R Presentation 
===

## Christopher Gandrud

## 1 July 2013

Access the Code
===

The code to create the following figure is available online.

To access it we type:

```{r, eval=FALSE}
# Access and run the code to create a caterpillar plot 

devtools::source_url("http://bit.ly/VRKphr")
```

Caterpillar Plot
===

```{r, echo=FALSE, message=FALSE}
# Access and run the code to create a caterpillar plot 

devtools::source_url("http://bit.ly/VRKphr")
```

Fertilizer Consumption Map (2003)
===

```{r CreategvisGeoMap, echo=FALSE, message=FALSE, results='asis'} 
# Create geo map of global fertilizer consumption for 2003
devtools::source_url("http://bit.ly/VNnZxS")
```
@

\noindent This example includes four slides and three code chunks. The last code chunk uses the \emph{googleVis}\index{googleVis} package to create the global map of fertilizer consumption we saw earlier in Figure \ref{GeoMapImage}. Because the slideshow we are creating is in HTML, the map will be fully dynamic. Note that like before you will not be able to see the map in the RStudio preview, only in a web browser.

To compile the slideshow either click the \texttt{Preview} button (\includegraphics[scale=0.35]{Children/Chapter13/images13/PreviewButton.png}) or save the \emph{.Rpres} document. When you do this you can view your updated slideshow in the \emph{Presentation} pane.\index{RStudio!Presentation pane} For example, see Figure \ref{PresentPane}. You can navigate through the slideshow using the arrow buttons at the bottom right of the \emph{Presentation} pane. If you click the magnifying glass icon (\includegraphics[scale=0.35]{Children/Chapter13/images13/MagGlass.png}) at the top of the \emph{Presentation} pane you will get a much larger view of the slideshow. You can also view the slideshow in your web browser by clicking on the \texttt{More} icon (\includegraphics[scale=0.35]{Children/Chapter13/images13/MorePres.png}), then \texttt{View in Browser}.

\paragraph{Publishing R Presentation slideshows}

You can use RStudio to show your presentation. However, this is probably not the best way for others to see it. \emph{googleVis} images won't show up and other people need to have RStudio to open it on their computer. So, you will probably want to either publish the presentation to a standalone HTML file and host it, for example, on a Dropbox\index{Dropbox} \emph{Public}\index{Dropbox!Public folder} folder or publish it directly to RPubs.\index{RPubs} To create a standalone HTML file simply click the \texttt{More} button in the \emph{Presentation} pane, then \texttt{Save as Webpage...}. Under the \texttt{More} button you can also chose the option \texttt{Publish to RPubs...}. We'll look at these options some more later in this chapter. 

\begin{figure}
	\caption{RStudio R Presentation Pane}
	\label{PresentPane}
	\begin{center}
		\includegraphics[width=\textwidth]{Children/Chapter13/images13/PresentationPane.png}
	\end{center}
\end{figure} 



%%%%%%%%%%%%%% Slidify %%%%%%%%%%%%%%%%
\subsection{Slideshows with Markdown, \emph{knitr}, and \texttt{slidify}}

It is also possible to create reproducible HTML5 slideshows\index{slideshow} with R Markdown using Ramnath Vaidyanathan's \emph{slidify}\index{slidify} package \citeyearpar{R-slidify}.\footnote{For more information about \emph{slidify} please visit its excellent website at \url{http://ramnathv.github.com/slidify/}. For example, this site includes information on how to customize slideshow layouts.} This package converts R Markdown files into HTML slideshows. 

\noindent There are a number of steps to create an HTML5 slideshow with \emph{slidify}:

\begin{enumerate}
    \item Initialize a slideshow with the \verb|author|\index{R command!author} command.
    \item Edit the slideshow's main R Markdown file, called \emph{index.Rmd} by default. This includes both the slideshow's header and body.
    \item Use the \verb|slidify|\index{R command!slidify} command to run \emph{knitr} and compile the slideshow. 
    \item Publish the slideshow online with the \verb|publish| command.\index{R command!publish}
\end{enumerate}

\noindent We will cover each step in turn.

\paragraph{HTML5 frameworks}

Before getting into the details of how to use \emph{slidify}, let's briefly look more into what an HTML5\index{HTML5} slideshow is and the frameworks that make them possible. HTML5 slideshows rely on a number of web technologies in addition to HTML5, including CSS,\index{CSS} and JavaScript\index{JavaScript} to create a website that behaves like a LaTeX beamer\index{beamer} or Powerpoint\index{Powerpoint} presentation. They run in your web browser and you may need to be connected to the internet for them to work properly as key components are often located remotely. Most browsers have a \texttt{Full Screen} mode you can use to view presentations. 

There are a number of different HTML5 slideshow frameworks that let you create and style your slideshows. Table \ref{SlideshowFrameworks} lists some of the major frameworks supported by \emph{slidify}. In all of the frameworks you view the slideshow in your web browser and advance through slides with the forward arrow key on your keyboard. You can go back with the back arrow. Despite these similarities, the frameworks have different looks and capabilities. Check out their respective websites listed in Table \ref{SlideshowFrameworks} for more information.

\begin{table}
    \caption{A Selection of HTML5 Slideshow Frameworks}
    \label{SlideshowFrameworks}
    \begin{center}
    \begin{tabular}{l c}
        \hline
        Framework & Website for more information \\[0.25cm]
        \hline\hline
        deck.js &  \url{http://imakewebthings.com/deck.js/}\index{deck.js} \\[0.25cm]
        dzslides & \url{http://paulrouget.com/dzslides/}\index{dzslides} \\[0.25cm]
        html5slides & \url{http://code.google.com/p/html5slides/}\index{html5slides} \\[0.25cm]
        shower & \url{https://github.com/shower/shower}\index{shower} \\[0.25cm]
        io2012 & \url{http://code.google.com/p/io-2012-slides/}\index{io2012} \\[0.25cm]
        \hline
    \end{tabular}
    \end{center}
\end{table}

\paragraph{Installing slidify}

To get started with \emph{slidify} load the \emph{devtools}\index{devtools} package and install \emph{slidify} from GitHub\index{GitHub}.\footnote{As of when I wrote this (April 2013) \emph{slidify} was not available on CRAN\index{CRAN}.}

<<Ch13Downloadslidify, eval=FALSE>>=
# Load devtools
library(devtools)

# Install slidify and ancillary libraries
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
@

\paragraph{Initializing a new slideshow}

Use the \verb|author|\index{R command!author} command to create a new slideshow. Imagine we want to create a new slideshow in the \emph{Presentation} folder of our \emph{ExampleProject} called \emph{MySlideShow}. To do this type:\index{R command!library}

<<Ch13slidifyAuthor, eval=FALSE>>=
# Set working directory
setwd("/ExampleProject/Presentation")

# Load slidify
library(slidify)

# Create slide show
author("MySlideShow")
@

\noindent This will create a new folder with an R Markdown file called \emph{index.Rmd}. It will also initialize a Git\index{Git} repository and create a folder called \emph{assets}. The \emph{assets} folder is where CSS,\index{CSS} JavaScript,\index{JavaScript} and other ancillary files needed to create the slideshow are stored. Luckily, \emph{slidify} takes care of all these things for us. If you want to, you can certainly customize these files.\footnote{See \url{http://ramnathv.github.com/slidify/customize.html} for more details on the best way to modify these files.} Edit the \emph{index.Rmd} file to add content to your slideshow. 

\paragraph{The \emph{slidify} header}

When you \verb|author| a slideshow, \emph{slidify} automatically opens the \emph{index.Rmd} file.\footnote{If you are using RStudio\index{RStudio} the file will open in a new source tab. In the R application, it will open the file in your default text editor. Finally in command line R on Mac or Unix-like computers it will open in VIM\index{VIM}.} The first thing you will see in this file is the \emph{slidify} header:

{\small
<<Ch13slidifyHeader, eval=FALSE, tidy=FALSE>>=
---
title       : 
subtitle    : 
author      : 
job         : 
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      # 
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
---
@
}

\noindent The first four lines relate to what will appear on the slideshow's title slide, i.e. the \texttt{title}, \texttt{subtitle}, \texttt{author}, and \texttt{job}.\footnote{This is intended as a place to put your job title and affiliation.}  The next five lines affect the slideshow's formatting. The \texttt{framework} line allows you to change the slideshow's overall type. It is currently set by default to Google's\index{Google} \emph{io2012} framework. You can see a number of other supported formats on the right side of the line. These include \emph{html5slides}, Opera's\index{Opera} \emph{shower} format, and \emph{dzslides}. You can use one of these other formats by deleting \texttt{io2012} after the colon and replacing it with the name of your desired framework.

The following two lines (\texttt{highlighter} and \texttt{hitheme}) relate to which syntax highlighting\index{syntax highlighting} theme you would like code chunks to be formatted with. The default highlighter is \emph{highlighter.js}\index{highlighter.js}\footnote{See: \url{http://softwaremaniacs.org/soft/highlight/en/}.} with the \emph{tomorrow} theme.\index{tomorrow theme}\footnote{See: \url{https://github.com/chriskempson/tomorrow-theme}.}

The next line allows you to automatically include a number of different ``widgets''. As we saw earlier in this chapter, MathJax lets us have well formatted math in Markdown produced documents. The \emph{bootstrap} widget lets you take advantage of, among other things, the wide range of JavaScript plug-ins\index{JavaScript plug-ins} available from Twitter Bootstrap\index{Twitter Bootstrap}.\footnote{See: \url{http://twitter.github.com/bootstrap/javascript.html}. For an example of how you can combine Twitter Bootstrap's \emph{Carousel} plug-in with \emph{googleVis} to create interactive timeline maps in slide shows see: \url{http://ramnathv.github.com/carouselDemo/#1}.} To add widgets, type their name in square brackets (\verb|[]|) separated by commas.

Finally there is the \texttt{mode} option. The mode option determines how to load auxiliary files and features such as CSS. In general you will want to use the default \texttt{selfcontained} mode.

\paragraph{Slide frames and slide titles}\index{Markdown!slide frames}

\emph{slidify} R Markdown documents use very similar syntax to ordinary R Markdown documents. \emph{knitr} code chunks are written in the same way as regular R Markdown. An important difference is that three dashes (\verb|---|) delimit individual slide frames, not a horizontal line. Importantly, you need to have an empty line before and after the three dashes or else a new slide will not be created. Two hash marks (\verb|##|) are used to indicate a slide's title.\footnote{One hash mark creates a slide title formatted in the same way as the text.} 

Here is code to include in a \emph{index.html} file that will create a very simple, but full \emph{knitr} HTML5 slideshow with \emph{slidify} using the syntax we just discussed:

<<Ch13SlidifyExample, eval=FALSE, tidy=FALSE>>=
---
title       : Example slidify and knitr Slideshow
subtitle    : 
author      : Christopher Gandrud
job         : 
framework   : io2012        
highlighter : highlight.js  
hitheme     : tomorrow       
widgets     : []            
mode        : selfcontained 
--- 

## Access the Code

The code to create the following figure is available online.

To access it we type: 

```{r, eval=FALSE}
# Access and run the code to create a caterpillar plot
devtools::source_url("http://bit.ly/VRKphr")
```

---

## The Figure

```{r, echo=FALSE, message=FALSE}
# Access and run the code to create a caterpillar plot
devtools::source_url("http://bit.ly/VRKphr")
```
@

\paragraph{Compiling a slideshow}

Use the \verb|slidify|\index{R command!slidify} command to compile the \emph{index.Rmd} file into a slideshow. This code runs \emph{knitr} and renders our R Markdown file into an HTML slideshow:

<<Ch13slidifyFile, eval=FALSE>>=
# Change to slideshow's working directory
setwd("/ExampleProject/Presentation/MySlideShow")

# Compile the slideshow
slidify("index.Rmd")
@

\noindent In RStudio\index{RStudio} you can click the \texttt{Knit HTML}\index{RStudio!Knit HTML button} button and it will \texttt{slidify} the R Markdown file. Note that the resulting slideshow may not work in the RStudio \textbf{Preview HTML} window,\index{RStudio!Preview HTML} but opening the \emph{index.html} file in your web browser should work fine. 

\paragraph{Publishing slidify slideshows}

You can of course show slideshows on your own computer by opening the \emph{index.html} file in a web browser. If you want to make your slideshow available to anyone with an internet connection use slidify's \verb|publish| command.\index{R command!publish} This will allow you to publish your presentation via GitHub\index{GitHub}, Dropbox\index{Dropbox}, or RPubs\index{RPubs}. Let's look at how to publish to GitHub and Dropbox.

To publish our example \emph{MySlideShow} on GitHub first create a new GitHub repository\index{GitHub!repository} called `MySlideShow' (see Section \ref{NewGitHubRepo} for instructions on how to create a new repository). Make sure the repository is empty, i.e. has no files in it. Then type in R:

<<Ch13GitPublish, eval=FALSE>>=
publish(user = "USER", repo = "MySlideShow", host = "github")
@

\noindent \texttt{USER} is your GitHub user name. This will create a new GitHub Pages\index{GitHub!Pages} website where your slideshow will be accessible to anyone on the internet.

To use the webpage hosting abilities of Dropbox's public folders type:

<<Ch13DrobpoxPublish, eval=FALSE>>=
publish("MySlideShow", host = "dropbox")
@

\noindent This will create a new directory in your Dropbox \emph{Public} folder.\index{Dropbox!Public folder} To get the URL address for the slideshow navigate to the folder and copy the public link for the \emph{index.html} file (see Section \ref{PublicLink} for more details).

Note: before you use the \verb|publish| command you will need to have set up accounts for the respective services. In the GitHub and Dropbox cases you also need to have set up the services on your computer. Please refer back to Chapter \ref{Storing} for more details on how to set up these services.

\section{Publishing Markdown Documents}

We saw in the previous section how \emph{slidify} can publish slideshows via Dropbox and GitHub. In Chapter \ref{GettingStartedRKnitr} (Section \ref{PublishRPubs}) we saw how to publish other R Markdown documents compiled with RStudio to RPubs. The \emph{knitr} command \texttt{knit2wp} can similarly post a knitted Markdown file to WordPress\footnote{\url{http://wordpress.com}} sites, that are often used for blogging.\index{knitr!knit2wp}\index{WordPress} In this section we will look at two other ways to publish R Markdown documents using Dropbox and GitHub.

\subsection{Stand alone HTML files}

Of course you can simply open the HTML file rendered from any R Markdown document in your web browser. If the HTML file contains the full information for the page, e.g. there are not auxiliary files it depends on, you can simply share this file via email or whatnot and anyone with a web browser can open it. We can of course also send auxiliary files if need be, but this can get unwieldy.

\subsection{Hosting webpages with Dropbox}\index{Dropbox!Public folder}

Probably one of the easiest ways to host an HTML file created with R Markdown is on your Dropbox \emph{Public} folder.\footnote{See Section \ref{EnablePublicFolder} for instructions on how to enable this folder if you created your Dropbox account after 4 October 2012.} Just like we saw with \emph{slidify} slideshows in the \emph{Public} folder any, HTML file will be rendered and widely accessible simply be entering the public link into a web browser. 

\subsection{GitHub Pages}\index{GitHub!Pages}\index{GitHub}

GitHub also offers a free hosting service for webpages. These can be much more complex than a single HTML file. The simplest way to create one of these pages is to create a repository with a file called \emph{README.Rmd}. You can \texttt{knit} this file and then create your GitHub Page with it. To do this go to the \texttt{Settings} \textrightarrow{} \texttt{GitHub Pages} on your repository's main GitHub website. Then click \texttt{Automatic Page Generator}. This places the contents of your \emph{README.md} file in the page and provides you with formatting options. Click \texttt{Publish} and you will have a new website. 

Clicking \texttt{Publish} creates a new orphan branch\footnote{An orphan branch is a branch with a different root from other repository branches. Another way of think about this is that they have their own history.}\index{Git!orphan branch} called \emph{gh-pages}.\index{GitHub!gh-pages branch} When these branches are pushed to GitHub it will create a website based around a file called \emph{index.html} that you include in the branch. This will be the website's main page. 

If you want to create more customized and larger websites with GitHub pages you can manually create a GitHub Pages orphan branch and push it to GitHub. This is essentially what \emph{slidify} did for us with its \texttt{publish}\index{R command!publish} command. Imagine we have our working directory set as a repository containing an R Markdown file that we have rendered into an HTML file called \emph{index.html}.\index{HTML} Let's create a new orphan branch:

<<Ch13GHPages1, eval=FALSE, tidy=FALSE, engine='sh'>>=
# Create orphan gh-pages branch
git checkout --orphan gh-pages
@

\noindent Now \texttt{add}\index{Git command!add} the files, \texttt{commit}\index{Git command!commit} the changes and \texttt{push}\index{Git command!push} it to GitHub. Push it to the \emph{gh-pages} branch like this:

<<Ch13GHPages2, eval=FALSE, tidy=FALSE, engine='sh'>>=
# Add files
git add .

# Commit changes
git commit -am "First gh-pages commit"

# Push branch to GitHub pages
git push origin gh-pages
@

\noindent A new webpage will be created at: \emph{USERNAME.github.io/REPO\_NAME} You can also add custom domain names. For details see: \url{https://help.github.com/articles/setting-up-a-custom-domain-with-pages}.

\paragraph{GitHub with Jekyll and Ruhoh}

If you want to create more complex websites with R Markdown and host them on GitHub you might want to look into Jekyll\footnote{\url{https://help.github.com/articles/using-jekyll-with-pages}}\index{Jekyll} or the slightly newer Ruhoh\index{Ruhoh} platform.\footnote{\url{http://ruhoh.com/}}  Jason Fisher has a useful blog post about how to combine Jekyll with \emph{knitr}. See: \url{http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/} (posted 3 July 2012). And of course, because R Markdown creates HTML markup files you can use virtually any other web hosting service to make your presentation documents widely available.

\subsection*{Chapter Summary}

In this chapter we have learned a number of tools for dynamically presenting our reproducible research on the web. Though LaTeX and PDFs will likely remain the main tools for presenting research in published journals and books for some time to come, choosing to also make your research available in online native formats can make it more accessible to general readers. It also allows you to take advantage of interactive tools like \emph{googleVis} for presenting your research.
